@doc raw"""
    Parameter

A paramter of a generic character or class type unique up to a polynomial modulus. They are used in `Parameters`.
"""
struct Parameter
  var::UPoly  # Actual name of the parameter  # TODO make this an Int?
  modulus::UPoly  # Said modulus
end
show(io::IO, a::Parameter) = print(io, "$(a.var) ∈ {1,…, $(a.modulus)}")

@doc raw"""
    ParameterSubstitution

A substitution of paramters used in `Parameters`. They are generated by for example `specclassparam!`.
"""
struct ParameterSubstitution
  var::UPoly  # The name of the replaced parameter  # TODO make this an Int?
  expression::UPoly  # The substitute for the parameter  # TODO do we need UPolyFrac here?
end
show(io::IO, a::ParameterSubstitution) = print(io, "$(a.var) = $(a.expression)")

@doc raw"""
    Parameters

Parameters of generic characters and class types. This is used in `GenericCharacter` and `CharTable` and is only of internal use.
"""
struct Parameters
  params::Vector{Parameter}
  exceptions::Vector{UPolyFrac}
end

getindex(p::Parameters, i::Integer) = p.params[i]

eltype(::Type{Parameters}) = Parameter

length(p::Parameters) = length(p.params)

iterate(p::Parameters, state::Integer=1) =
  state > length(p) ? nothing : (p[state], state + 1)

function Parameters(p::Vector{Parameter})
  return Parameters(p, UPolyFrac[])
end

# TODO Use OSCAR's expressify system here.
function show(io::IO, a::Parameters)
  print(io, join(a.params, ", "))
  if !isempty(a.exceptions)
    print(io, " except ")
    for (i, exception) in enumerate(a.exceptions)
      if isone(denominator(exception))
        print(io, "$(numerator(exception)) ∈ ℤ")
      else
        print(io, "$(numerator(exception)) ∈ ($(denominator(exception)))ℤ")
      end
      if i < length(a.exceptions)
        print(io, ", ")
      end
    end
  end
end
